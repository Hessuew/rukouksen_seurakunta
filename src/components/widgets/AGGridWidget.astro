---
import FilterContainer from '~/components/filters/FilterContainer.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';

interface Props {
  gridId: string;
  categories?: string[];
  topics?: string[];
  height?: string;
  width?: string;
  data: unknown[];
  columnDefs?: unknown[];
}

const { gridId, categories = [], topics = [], height = '600px', width = '100%', data, columnDefs = [] } = Astro.props;

// Default column definitions if not provided
const defaultColumnDefs = [
  {
    headerName: '#',
    field: 'id',
    width: 80,
    sortable: true,
    sort: 'desc',
  },
  {
    headerName: 'Title',
    field: 'title',
    sortable: true,
    width: 480,
  },
  {
    headerName: 'Category',
    field: 'category',
    sortable: true,
    width: 150,
  },
  {
    headerName: 'Topic',
    field: 'topic',
    sortable: true,
    width: 240,
  },
  {
    headerName: 'Date',
    field: 'date',
    sortable: true,
    width: 150,
  },
  {
    headerName: 'Source',
    field: 'source',
    sortable: true,
    width: 240,
  },
];

const finalColumnDefs = columnDefs.length > 0 ? columnDefs : defaultColumnDefs;
---

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ag-grid-community@32.3.3/styles/ag-grid.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ag-grid-community@32.3.3/styles/ag-theme-quartz.css" />

{
  (categories.length > 0 || topics.length > 0) && (
    <FilterContainer
      options={[categories, topics]}
      allLabels={['All Categories', 'All Topics']}
      classes={{
        container: 'py-0 lg:py-0 md:py-0 mb-8',
      }}
      gridId={gridId}
    />
  )
}

<WidgetWrapper containerClass="py-0 lg:py-0 md:py-0">
  <div class="ag-theme-quartz" style={`height: ${height}; width: ${width};`} id={gridId}></div>
</WidgetWrapper>

<script src="https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.min.js" is:inline></script>

<script
  is:inline
  define:vars={{
    gridId,
    data,
    finalColumnDefs,
  }}
>
  (function () {
    function initGrid() {
      let currentCategoryFilter = 'All Categories';
      let currentTopicFilter = 'All Topics';

      function updateFilterState(button) {
        const filterType = button.getAttribute('data-filter-type');
        const filterButtons = button.closest('[data-filter-buttons]').querySelectorAll('button');

        // Reset selected state for all buttons in this group
        filterButtons.forEach((btn) => btn.setAttribute('data-selected', 'false'));

        // Set selected state for clicked button
        button.setAttribute('data-selected', 'true');

        return filterType;
      }

      const gridOptions = {
        columnDefs: [
          ...finalColumnDefs.map((col) => {
            if (col.field === 'category') {
              return {
                ...col,
                cellRenderer: (params) => {
                  return `
                   <span class="inline-block px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                     ${params.value}
                   </span>
                 `;
                },
              };
            }

            if (col.field === 'topic') {
              return {
                ...col,
                cellRenderer: (params) => {
                  return `
                   <span class="inline-block px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                     ${params.value}
                   </span>
                 `;
                },
              };
            }

            return col;
          }),
          {
            headerName: 'Visit',
            field: 'url',
            sortable: false,
            width: 150,
            cellRenderer: (params) => {
              if (!params.value) return '';
              
              return `
                <span class="inline-flex items-center gap-1 text-primary hover:text-primary-darker transition-colors duration-300 cursor-pointer group">
                  Visit website
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 transition-transform duration-300 transform group-hover:translate-x-1" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                  </svg>
                </span>
              `;
            },
            cellClass: 'flex items-center justify-center',
          }
        ],
        onCellClicked: (event) => {
          if (event.data && event.data.url) {
            window.open(event.data.url, '_blank');
          }
        },
        rowData: data,
        pagination: true,
        paginationPageSize: 100,
        defaultColDef: {
          resizable: true,
        },
        sortingOrder: ['desc', 'asc', null],
        isExternalFilterPresent: () => {
          return currentCategoryFilter !== 'All Categories' || currentTopicFilter !== 'All Topics';
        },
        doesExternalFilterPass: (node) => {
          const data = node.data;
          if (!data) return true;

          const categoryMatch =
            currentCategoryFilter === 'All Categories' ||
            (data.category && data.category.toLowerCase() === currentCategoryFilter.toLowerCase());

          const topicMatch =
            currentTopicFilter === 'All Topics' ||
            (data.topic && data.topic.toLowerCase() === currentTopicFilter.toLowerCase());

          return categoryMatch && topicMatch;
        },
        getRowClass: (params) => {
          return 'cursor-pointer hover:bg-gray-50 transition-colors duration-300 group';
        },
        onRowMouseOver: (event) => {
          const rowElement = event.node.rowElement;
          if (rowElement) {
            const visitBadge = rowElement.querySelector('.visit-badge');
            if (visitBadge) {
              visitBadge.classList.remove('opacity-0', 'invisible');
              visitBadge.classList.add('opacity-100');
            }
          }
        },
        onRowMouseOut: (event) => {
          const rowElement = event.node.rowElement;
          if (rowElement) {
            const visitBadge = rowElement.querySelector('.visit-badge');
            if (visitBadge) {
              visitBadge.classList.remove('opacity-100');
              visitBadge.classList.add('opacity-0', 'invisible');
            }
          }
        },
        onGridReady: (params) => {
          const gridApi = params.api;

          // Add visit badge to each row
          gridApi.forEachNode((rowNode) => {
            const rowElement = rowNode.rowElement;
            if (rowElement && rowNode.data && rowNode.data.url) {
              const visitBadge = document.createElement('div');
              visitBadge.className = 'visit-badge opacity-0 invisible';
              visitBadge.innerHTML = `
                <span class="text-sm text-primary inline-flex items-center gap-1 group-hover:gap-2">
                  Visit website
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 transition-transform duration-300 transform group-hover:translate-x-1" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                  </svg>
                </span>
              `;
              rowElement.appendChild(visitBadge);
            }
          });

          // Quick filter setup
          const quickFilterInput = document.getElementById(`${gridId}-quick-filter`);
          if (quickFilterInput) {
            quickFilterInput.addEventListener('input', () => {
              gridApi.setGridOption('quickFilterText', quickFilterInput.value);
            });
          }

          // Add event listeners for filter buttons
          const filterButtons = document.querySelectorAll(`[data-filter-type]`);
          filterButtons.forEach((button) => {
            button.addEventListener('click', () => {
              const filterType = updateFilterState(button);
              const filterValue = button.textContent.trim();

              if (filterType === 'category') {
                currentCategoryFilter = filterValue;
              } else if (filterType === 'topic') {
                currentTopicFilter = filterValue;
              }

              gridApi.onFilterChanged();
            });
          });
        },
      };

      const gridElement = document.querySelector(`#${gridId}`);
      if (gridElement) {
        agGrid.createGrid(gridElement, gridOptions);
      }
    }

    // Ensure the script runs after the DOM is fully loaded
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initGrid);
    } else {
      initGrid();
    }
  })();
</script>

<style>
  /* Ensure Tailwind classes are applied */
  .ag-cell-value {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    width: 100%;
    height: 100%;
  }

  .visit-badge {
    @apply absolute top-1/2 right-4 transform -translate-y-1/2 
           opacity-0 invisible transition-all duration-300 
           text-sm text-primary inline-flex items-center gap-1 
           group-hover:gap-2;
  }

  .visit-badge svg {
    @apply h-4 w-4 transition-transform duration-300 transform group-hover:translate-x-1;
  }

  .ag-row {
    @apply relative;
  }
</style>
