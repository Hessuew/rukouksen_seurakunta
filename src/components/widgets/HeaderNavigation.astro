---
import { getPermalink } from '~/utils/permalinks';
import { Image } from 'astro:assets';
import type { MenuLink } from './Header.astro';

interface Props {
  links: Array<MenuLink>;
  currentPath: string;
}

const { links, currentPath } = Astro.props;
---

<div
  class="dropdown-menu absolute top-[56px] lg:left-[25%] xl:left-[27%] 2xl:left-[35%] lg:backdrop-blur-md lg:bg-white/80 dark:lg:bg-[#030621e6]/80 drop-shadow-xl lg:border border-gray-200 dark:border-gray-800 transition-all duration-300 ease-in-out hidden rounded-md"
  data-navigation-menu
>
  <div class="w-[440px]">
    <div
      class="flex overflow-hidden relative transition-[height] duration-300 ease-in-out"
      style="height: 180px;"
      data-nav-container
    >
      {
        links.map((headerLinks, index) => (
          <div
            class:list={[
              'w-full h-full flex-shrink-0 transition-all duration-300 ease-in-out transform absolute inset-0',
              { 'translate-x-0 opacity-100 z-10': index === 0 },
              { 'translate-x-[30%] opacity-0 z-0': index > 0 },
            ]}
            role="tabpanel"
            id={`nav-panel-${index}`}
            data-nav-panel={index}
          >
            <div class="lg:flex lg:flex-row lg:items-start lg:gap-4 lg:p-4 h-full">
              <ul class="py-2 w-2/5">
                {headerLinks.links
                  ?.filter((link) => !link.image)
                  .map(({ text, href }) => (
                    <li>
                      <a
                        class:list={[
                          'first:rounded-t last:rounded-b lg:hover:bg-gray-100 hover:text-link dark:hover:text-white dark:hover:bg-gray-700 py-2 px-5 block whitespace-no-wrap',
                          { 'aw-link-active': href === currentPath },
                        ]}
                        href={getPermalink(`${href}`)}
                      >
                        {text}
                      </a>
                    </li>
                  ))}
              </ul>
              <ul class="lg:w-3/5 lg:space-y-2 lg:block">
                {headerLinks.links
                  ?.filter((link) => link.image)
                  .map(({ text, href, image }) => (
                    <li class="group">
                      <a
                        class="relative block h-24 overflow-hidden rounded-lg ring-0 ring-white dark:ring-gray-700 group-hover:ring-1 transition duration-200"
                        href={getPermalink(`${href}`)}
                      >
                        {image && (
                          <Image
                            src={image.src}
                            alt={image?.alt}
                            width={400}
                            height={300}
                            class="absolute inset-0 w-full h-full object-cover object-center opacity-60 group-hover:opacity-75 group-hover:scale-105 transition duration-500"
                          />
                        )}
                        <div class="absolute inset-0 bg-gradient-to-t from-black/60 to-black/20" />
                        <div class="absolute bottom-0 left-0 p-4">
                          <span class="text-white font-medium">{text}</span>
                        </div>
                      </a>
                    </li>
                  ))}
              </ul>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</div>

<script>
  function setupNavigation() {
    const menu = document.querySelector('[data-navigation-menu]');
    const container = menu?.querySelector('[data-nav-container]') as HTMLElement;
    const panels = menu?.querySelectorAll('[data-nav-panel]');
    const headerButtons = document.querySelectorAll('[data-nav-button]');
    let activePanel = 0;
    let isMouseOverMenu = false;

    function showPanel(index: number) {
      const direction = index > activePanel ? 1 : -1;
      const height = index === 0 ? 180 : 232;

      // Animate container height
      if (container) {
        container.style.height = `${height}px`;
      }

      panels?.forEach((panel, i) => {
        if (i === index) {
          // Panel sliding in
          (panel as HTMLElement).style.transform = `translateX(${direction * 30}%)`; // Start from right/left
          panel.classList.remove('opacity-0', 'z-0');
          panel.classList.add('z-10');
          requestAnimationFrame(() => {
            (panel as HTMLElement).style.transform = 'translateX(0)';
            panel.classList.add('opacity-100');
          });
        } else {
          // Panel sliding out
          (panel as HTMLElement).style.transform = 'translateX(0)';
          panel.classList.remove('z-10');
          panel.classList.add('z-0');
          requestAnimationFrame(() => {
            (panel as HTMLElement).style.transform = `translateX(${-direction * 30}%)`;
            panel.classList.remove('opacity-100');
            panel.classList.add('opacity-0');
          });
        }
      });
      activePanel = index;
    }

    headerButtons.forEach((button, index) => {
      button.addEventListener('mouseenter', () => {
        if (!menu?.classList.contains('lg:block')) {
          menu?.classList.add('lg:block');
        }
        showPanel(index);
      });
    });

    menu?.addEventListener('mouseenter', () => {
      isMouseOverMenu = true;
    });

    menu?.addEventListener('mouseleave', () => {
      isMouseOverMenu = false;
      menu?.classList.remove('lg:block');
    });

    document.addEventListener('mouseover', (e) => {
      const target = e.target as HTMLElement;
      if (
        !menu?.contains(target) &&
        !Array.from(headerButtons).some((button) => button.contains(target)) &&
        !isMouseOverMenu
      ) {
        menu?.classList.remove('lg:block');
      }
    });
  }

  function initializeNavigation() {
    setupNavigation();
  }

  document.addEventListener('DOMContentLoaded', initializeNavigation);
  document.addEventListener('astro:page-load', initializeNavigation);
</script>
