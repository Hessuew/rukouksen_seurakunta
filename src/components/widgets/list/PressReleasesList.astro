---
import { twMerge } from 'tailwind-merge';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import { pressReleasesByYear, sortedYears } from '~/data/pressReleases';

interface Props {
  columns?: 1 | 2 | 3 | 4;
  classes?: {
    container?: string;
    item?: string;
    title?: string;
    subtitle?: string;
    description?: string;
    image?: string;
  };
}

const { columns = 2, classes = {} } = Astro.props;
---

<WidgetWrapper animated={false} containerClass="py-0 lg:py-0 md:py-0">
  <div class="press-releases-container max-w-7xl mx-auto">
    {
      sortedYears.map((year) => (
        <div
          class="mb-16 sm:mb-24 item-year-card opacity-0 translate-y-12 duration-[1500ms] ease-out transition-[opacity,transform] delay-300"
          data-intersect
        >
          <h2 class="text-3xl sm:text-4xl font-bold text-gray-900 dark:text-gray-100 mb-8 sm:mb-12 text-center intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:translate-y-8 motion-safe:md:intersect:animate-fade motion-safe:md:intersect:animate-slide-up">
            {year}
          </h2>

          <div
            class={twMerge(
              `grid gap-8 gap-x-12 sm:gap-y-8 grid-auto-flow-row ${
                columns === 4
                  ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2'
                  : columns === 3
                    ? 'lg:grid-cols-3 sm:grid-cols-2'
                    : columns === 2
                      ? 'sm:grid-cols-2'
                      : ''
              }`,
              classes.container
            )}
            role="list"
          >
            {pressReleasesByYear[year].map((release, index) => {
              const col = index % columns;
              const delay = 200 + col * 150;

              return (
                <a
                  href={release.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="item-card block no-underline hover:no-underline group opacity-0 translate-y-6 md:translate-y-12 duration-[1500ms] ease-out focus:outline-none focus:ring-2 focus:ring-primary rounded-lg"
                  data-intersect
                  data-type={release.type}
                  data-category={release.category || ''}
                  aria-label={`Visit ${release.title} website`}
                  role="listitem"
                  style={`--animation-delay: ${delay}ms`}
                >
                  <div class="bg-white dark:bg-transparent rounded-lg shadow-lg dark:shadow-none p-6 h-full transition-all duration-300 hover:bg-gray-100/0 dark:hover:bg-white/0 group-hover:shadow-xl dark:group-hover:shadow-none">
                    <div class="flex flex-col h-full">
                      <div class="text-sm font-medium text-primary-600 dark:text-primary-400 mb-3">
                        {new Date(release.date).toLocaleDateString('en-US', {
                          year: 'numeric',
                          month: 'long',
                          day: 'numeric',
                        })}
                      </div>
                      <h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-4">{release.title}</h3>
                      <p class="text-gray-600 dark:text-gray-300 mb-6 line-clamp-3">{release.source}</p>
                      <div class="flex flex-wrap gap-2">
                        {release.type && (
                          <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-50 text-blue-700 dark:bg-blue-900/50 dark:text-blue-300 ring-1 ring-inset ring-blue-700/10 dark:ring-blue-700/30">
                            {release.type}
                          </span>
                        )}
                        {release.category && (
                          <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-50 text-green-700 dark:bg-green-900/50 dark:text-green-300 ring-1 ring-inset ring-green-700/10 dark:ring-green-700/30">
                            {release.category}
                          </span>
                        )}
                      </div>
                      <div class="mt-auto pt-4">
                        <span
                          class="text-sm text-primary mt-2 inline-flex items-center gap-1 transition-all duration-300 group-hover:gap-2"
                          aria-hidden="true"
                        >
                          Read more
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="h-4 w-4 transition-transform duration-300 transform group-hover:translate-x-1"
                            viewBox="0 0 20 20"
                            fill="currentColor"
                            aria-hidden="true"
                            role="presentation"
                          >
                            <path
                              fill-rule="evenodd"
                              d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z"
                              clip-rule="evenodd"
                            />
                          </svg>
                        </span>
                      </div>
                    </div>
                  </div>
                </a>
              );
            })}
          </div>
        </div>
      ))
    }
  </div>
</WidgetWrapper>

<style>
  /* Base animation classes */
  [data-intersect] {
    opacity: 0;
    transform: translateY(1.5rem);
    transition:
      opacity 1s ease-out,
      transform 1s ease-out;
    transition-delay: var(--animation-delay, 0ms);
  }

  @media (min-width: 768px) {
    [data-intersect] {
      transform: translateY(3rem);
    }
  }

  [data-intersect].intersected {
    opacity: 1;
    transform: translateY(0);
  }

  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>

<script>
  function initIntersectionObserver() {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add('intersected');
          }
        });
      },
      {
        root: null,
        rootMargin: '0px',
        threshold: 0.05,
      }
    );

    document.querySelectorAll('[data-intersect]').forEach((el) => {
      observer.observe(el);
    });

    return observer;
  }

  // Initialize on page load
  let observer = initIntersectionObserver();

  // Get container element
  const containerElement = document.querySelector('.press-releases-container');

  if (containerElement) {
    const cleanup = () => {
      observer.disconnect();
    };

    // Re-initialize on view transitions
    containerElement.addEventListener('astro:page-load', () => {
      cleanup();
      observer = initIntersectionObserver();
    });
  }
</script>
