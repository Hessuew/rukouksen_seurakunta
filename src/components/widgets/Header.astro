---
import ToggleMenu from '~/components/common/ToggleMenu.astro';
import ToggleTheme from '~/components/common/ToggleTheme.astro';
import Logo from '~/components/Logo.astro';
import Button from '~/components/ui/Button.astro';
import AnimatedChildSvg from '~/components/widgets/AnimatedChildSvg.astro';
import HeaderNavigation from '~/components/widgets/HeaderNavigation.astro';
import type { CallToAction } from '~/types';
import { getHomePermalink, getPermalink, trimSlash } from '~/utils/permalinks';
import type { ImageMetadata } from 'astro';
import { Icon } from 'astro-icon/components';
import { twMerge } from 'tailwind-merge';

// import LanguagePicker from '../common/LanguagePicker.astro';
// import { getLangFromUrl, useTranslations } from '~/i18n/utils';

interface Link {
  text?: string;
  description?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
  image?: {
    src: ImageMetadata;
    alt: string;
  };
}

export interface MenuLink extends Link {
  links?: Array<MenuLink>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  classes?: Record<string, string>;
  actions?: Array<CallToAction>;
  isSticky?: boolean;
  isDark?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  showLangPicker?: boolean;
  showRssFeed?: boolean;
  position?: string;
}

const {
  id = 'header',
  links = [],
  actions = [],
  isSticky = false,
  isDark = false,
  isFullWidth = false,
  showToggleTheme = false,
  // showLangPicker = true,
  // showRssFeed = false,
  position = 'center',
  classes = {},
} = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
// const lang = getLangFromUrl(Astro.url);
// const t = useTranslations(lang);

const { nav: navClass = '' } = classes;
---

<!-- 
<style>
  @keyframes slideDown {
    from {
      transform: translateY(-32%);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  .animate-slide-down {
    animation: slideDown 1.2s ease-out forwards;
  }
</style> -->
<header
  class:list={[
    { sticky: isSticky, relative: !isSticky, dark: isDark },
    'top-0 z-40 flex-none mx-auto w-full border-b border-gray-50/0 transition-[opacity] ease-in-out',
    // { 'animate-slide-down': currentPath === '/' },
  ]}
  {...isSticky ? { 'data-aw-sticky-header': true } : {}}
  {...id ? { id } : {}}
>
  <div class="absolute inset-0"></div>
  <div
    class:list={[
      'relative text-default py-1 px-3 md:px-6 mx-auto w-full',
      {
        'md:flex md:justify-between': position !== 'center',
      },
      {
        'md:grid md:grid-cols-3 md:items-center': position === 'center',
      },
      {
        'max-w-7xl': !isFullWidth,
      },
    ]}
  >
    <div class:list={[{ 'mr-auto rtl:mr-0 rtl:ml-auto': position === 'right' }, 'flex justify-between']}>
      <a class="items-center relative inline-block" href={getHomePermalink()}>
        <Logo />
        <div class="absolute w-6 h-6 bottom-2 -right-3.5 md:-bottom-2.5">
          <AnimatedChildSvg animate={false} classes="w-full h-full" />
        </div>
      </a>
      <div class="flex items-center md:hidden">
        <ToggleMenu />
      </div>
    </div>
    <nav
      class={twMerge(
        navClass,
        'items-center w-full md:w-auto hidden md:flex md:mx-5 text-default overflow-y-auto overflow-x-hidden md:overflow-y-visible md:overflow-x-auto md:justify-self-center'
      )}
      aria-label="Main navigation"
    >
      <ul
        class="flex flex-col md:flex-row md:self-center w-full md:w-auto text-xl md:text-[0.9375rem] tracking-[0.01rem] font-medium md:justify-center"
      >
        {
          links.map(({ text, href, links }, index) => (
            <li class={links?.length ? 'dropdown' : ''}>
              {links?.length ? (
                <>
                  <button
                    type="button"
                    class="px-2.5 py-3 flex items-center whitespace-nowrap"
                    data-nav-button
                    id={`nav-button-${index}`}
                  >
                    <span>
                      {text}
                      <Icon
                        name="tabler:chevron-down"
                        class="w-3.5 h-3.5 ml-0.5 rtl:ml-0 rtl:mr-0.5 hidden md:inline"
                      />
                    </span>
                  </button>
                  <div class="flex md:hidden md:backdrop-blur-md dark:md:bg-dark rounded md:absolute pl-4 md:pl-0 font-medium md:bg-white/90 md:min-w-[480px] drop-shadow-xl md:border border-gray-200 dark:border-gray-800">
                    <div class="md:flex md:flex-row md:items-start md:gap-4 md:p-4">
                      <ul class="py-2 md:flex-1">
                        {[
                          ...links.filter((link) => !link.image),
                          ...links.filter((link) => link.image).map((link) => ({ ...link, image: undefined })),
                        ].map(({ text: text2, href: href2 }) => (
                          <li class="block md:hidden">
                            <a
                              class:list={[
                                'first:rounded-t last:rounded-b md:hover:bg-gray-100 hover:text-link dark:hover:text-white dark:hover:bg-gray-700 py-2 px-5 block whitespace-no-wrap',
                                { 'aw-link-active': href2 === currentPath },
                              ]}
                              href={getPermalink(`${href2}`)}
                            >
                              {text2}
                            </a>
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>
                </>
              ) : (
                <a
                  class:list={[
                    'hover:text-primary px-4 py-3 flex items-center whitespace-nowrap',
                    { 'aw-link-active': href === currentPath },
                  ]}
                  href={getPermalink(`${href}`)}
                >
                  {text}
                </a>
              )}
            </li>
          ))
        }
      </ul>
    </nav>
    <HeaderNavigation links={links.filter((link) => link.links?.length)} currentPath={currentPath} />
    <div
      class:list={[
        { 'ml-auto rtl:ml-0 rtl:mr-auto': position === 'left' },
        'hidden md:self-center md:flex items-center md:mb-0 fixed w-full md:w-auto md:static justify-end left-0 rtl:left-auto rtl:right-0 bottom-0 p-3 md:p-0 md:justify-self-end z-50',
      ]}
    >
      <div class="items-center flex justify-between w-full md:w-auto">
        <div class="flex">
          <!-- {showLangPicker && <LanguagePicker />} -->
          {showToggleTheme && <ToggleTheme iconClass="w-6 h-6 md:w-5 md:h-5 md:inline-block" />}
          <!-- {
            showRssFeed && (
              <a
                class="text-muted dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5 inline-flex items-center"
                aria-label="RSS Feed"
                href={getAsset('/rss.xml')}
              >
                <Icon name="tabler:rss" class="w-5 h-5" />
              </a>
            )
          } -->
        </div>
        {
          actions?.length ? (
            <span class="ml-4 rtl:ml-0 rtl:mr-4">
              {actions.map((btnProps) => (
                <Button {...btnProps} class="ml-2 py-2.5 px-5.5 md:px-6 font-semibold shadow-none text-sm w-auto" />
              ))}
            </span>
          ) : (
            ''
          )
        }
      </div>
    </div>
  </div>
</header>
