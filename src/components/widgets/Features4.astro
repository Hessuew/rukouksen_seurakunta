---
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Headline from '~/components/ui/Headline.astro';
import ItemGridLink from '~/components/ui/ItemGridLink.astro';
import type { ItemLink } from '~/types';
import { twMerge } from 'tailwind-merge';

export interface Props {
  title?: string;
  subtitle?: string;
  tagline?: string;
  items: Array<ItemLink>;
  columns?: 1 | 2 | 3 | 4;
  id?: string;
  isDark?: boolean;
  bg?: string;
  isProfile?: boolean;
  classes?: {
    container?: string;
    title?: Record<string, string | Record<string, string>>;
    subtitle?: string;
    items?: {
      container?: string;
      item?: string;
      title?: string;
      subtitle?: string;
      description?: string;
      image?: string;
    };
  };
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  items = [],
  columns = 3,
  id,
  isDark = false,
  isProfile = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper
  id={id}
  isDark={isDark}
  animated={false}
  containerClass={twMerge('max-w-7xl mx-auto', classes?.container)}
  bg={bg}
>
  {
    (title || subtitle || tagline) && (
      <div
        class="mb-12 md:mx-auto md:mb-16 text-center max-w-3xl opacity-0 translate-y-12 duration-[1500ms] ease-out transition-[opacity,transform] delay-300"
        data-intersect
      >
        <Headline
          title={title}
          subtitle={subtitle}
          tagline={tagline}
          classes={{
            container: 'max-w-xl sm:mx-auto lg:max-w-2xl',
            title: twMerge(
              'text-4xl md:text-5xl font-bold leading-tighter tracking-tighter mb-4 font-heading',
              classes?.title?.title?.toString() || ''
            ),
            ...((classes?.title as Record<string, string>) ?? {}),
          }}
        />
      </div>
    )
  }
  <div class={`${classes?.container ?? ''}`}>
    <!-- <div class="flex justify-end mb-4">
      <div class="inline-flex rounded-lg border border-gray-200 dark:border-gray-700">
        <button id="gridViewBtn" class="px-4 py-2 rounded-l-lg bg-primary text-white text-sm" data-view="grid">
          Grid
        </button>
        <button
          id="listViewBtn"
          class="px-4 py-2 rounded-r-lg hover:bg-gray-100 dark:hover:bg-gray-800 text-sm"
          data-view="list"
        >
          List
        </button>
      </div>
    </div> -->

    <div id="itemsContainer">
      <ItemGridLink
        items={items}
        columns={columns}
        isProfile={isProfile}
        classes={{
          container: classes?.items?.container,
          item: classes?.items?.item,
          title: classes?.items?.title,
          subtitle: classes?.items?.subtitle,
          description: classes?.items?.description,
          image: classes?.items?.image,
        }}
      />
    </div>
  </div>
</WidgetWrapper>

<script>
  const gridViewBtn = document.getElementById('gridViewBtn');
  const listViewBtn = document.getElementById('listViewBtn');
  const itemsContainer = document.getElementById('itemsContainer');

  const currentView = localStorage.getItem('teamViewPreference') || 'grid';

  const updateView = (view: string) => {
    // Update button styles
    if (view === 'grid') {
      gridViewBtn?.classList.add('bg-primary', 'text-white');
      gridViewBtn?.classList.remove('hover:bg-gray-100', 'dark:hover:bg-gray-800');
      listViewBtn?.classList.remove('bg-primary', 'text-white');
      listViewBtn?.classList.add('hover:bg-gray-100', 'dark:hover:bg-gray-800');
    } else {
      listViewBtn?.classList.add('bg-primary', 'text-white');
      listViewBtn?.classList.remove('hover:bg-gray-100', 'dark:hover:bg-gray-800');
      gridViewBtn?.classList.remove('bg-primary', 'text-white');
      gridViewBtn?.classList.add('hover:bg-gray-100', 'dark:hover:bg-gray-800');
    }

    // Create a new ItemGridLink with updated view type
    const currentHTML = itemsContainer?.innerHTML || '';
    if (itemsContainer) {
      const newHTML = currentHTML.replace(/viewType="(grid|list)"/, `viewType="${view}"`);
      itemsContainer.innerHTML = newHTML;
    }
  };

  // Set initial view
  updateView(currentView);

  gridViewBtn?.addEventListener('click', () => {
    updateView('grid');
  });

  listViewBtn?.addEventListener('click', () => {
    updateView('list');
  });

  // Setup intersection observer for animations
  const intersectionObserver = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add('intersected');
        intersectionObserver.unobserve(entry.target);
      }
    });
  });

  // Initialize
  document.querySelectorAll('[data-intersect]').forEach((element) => {
    intersectionObserver.observe(element);
  });
</script>

<style>
  [data-intersect].intersected {
    opacity: 1 !important;
    transform: translateY(0) !important;
  }
</style>
