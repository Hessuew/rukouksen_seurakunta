---
import { safeGet } from '@astro-community/astro-embed-utils';
import type { HTMLAttributes } from 'astro/types';
import './Vimeo.css';
import type { ImageMetadata } from 'astro';

// Thanks to eleventy-plugin-vimeo-embed
// https://github.com/gfscott/eleventy-plugin-vimeo-embed/blob/main/lib/extractMatches.js
const urlPattern =
  /(?=(\s*))\1(?:<a [^>]*?>)??(?=(\s*))\2(?:https?:\/\/)??(?:w{3}\.)??(?:vimeo\.com)\/(\d{1,20})(?:[^\s<>]*)(?=(\s*))\4(?:<\/a>)??(?=(\s*))\5/;

/**
 * Extract a Vimeo ID from a URL if it matches the pattern.
 * @param url URL to test
 * @returns A Vimeo video ID or undefined if none matched
 */
function urlMatcher(url: string): string | undefined {
  const match = url.match(urlPattern);
  return match?.[3];
}

export interface Props extends HTMLAttributes<'div'> {
  /** Vimeo video ID or URL. */
  id: string;
  poster?: ImageMetadata;
  /** URL to an image to use as the poster instead of the default thumbnail. */
  posterUrl?: string;
  /** Resolution to use for the Vimeo poster image. */
  posterQuality?: 'max' | 'high' | 'default' | 'low';
  /** See https://vimeo.zendesk.com/hc/en-us/articles/360001494447-Player-parameters-overview */
  params?: string;
  /** Label for the button that will play the video. Default label: `'Play'` */
  playlabel?: string;
}

const {
  id,
  poster,
  posterUrl,
  posterQuality = 'default',
  params = '',
  playlabel = 'Play',
  style,
  ...attrs
} = Astro.props as Props;

const idRegExp = /^(\d+)(?:\/([a-f0-9]+))?$/i;

const searchParams = new URLSearchParams();

function extractID(idOrUrl: string) {
  const idMatch = idOrUrl.match(idRegExp);
  if (idMatch) {
    const [, videoId, hash] = idMatch;
    // If there's a hash component, include it in the params
    if (hash) {
      searchParams.set('h', hash);
      return videoId;
    }
    return videoId;
  }
  return urlMatcher(idOrUrl);
}

const videoid = extractID(id);
if (!videoid) {
  throw new Error(`[astro-embed] "${id}" is an invalid Vimeo URL or ID.`);
}

let posterURL = posterUrl || poster?.src;
if (!posterURL) {
  // Include the hash parameter in the API call
  const hash = searchParams.get('h');
  const apiUrl = `https://vimeo.com/api/oembed.json?url=https://vimeo.com/${videoid}${hash ? '/' + hash : ''}`;
  try {
    const data = await safeGet(apiUrl);
    if (data) {
      posterURL = data.thumbnail_url;
      if (posterQuality && posterQuality !== 'default') {
        const resolution = { max: 1280, high: 640, low: 120 }[posterQuality] || 640;
        if (posterURL?.includes('_')) {
          posterURL = posterURL.replace(/_\d+\./, `_${resolution}.`);
        }
      }
    } else {
      console.warn(`Failed to fetch poster URL for video ${videoid}`);
    }
  } catch (error) {
    console.error(`Error fetching Vimeo thumbnail: ${error}`);
  }
}

let [searchString, t] = params.split('#t=');
if (searchString) {
  // Merge any existing params
  const existingParams = new URLSearchParams(searchString);
  existingParams.forEach((value, key) => {
    searchParams.set(key, value);
  });
}
// if (!t && t) t = searchParams.get('t') as string;
if (!t) t = searchParams.get('t') as string;
searchParams.append('autoplay', '1');
if (!searchParams.has('dnt')) searchParams.append('dnt', '1');

const color = searchParams.get('color');

const styles: string[] = [];
if (style) styles.push(style as string);
if (color) styles.push(`--ltv-color: #${color}`);
if (posterURL) styles.push(`background-image: url('${posterURL}')`);
if (poster) styles.push(`background-image: ('${poster}')`);
---

<lite-vimeo data-id={videoid} data-t={t} data-params={searchParams.toString()} style={styles.join(';')} {...attrs}>
  <a class="ltv-playbtn" href={`https://vimeo.com/${videoid}`} aria-label={playlabel}></a>
</lite-vimeo>

<script>
  class LiteVimeo extends HTMLElement {
    // Gotta encode the untrusted value to prevent XSS.
    videoId = encodeURIComponent(this.dataset.id!);
    static preconnected = false;

    connectedCallback() {
      // On hover (or tap), warm up the TCP connections we're (likely) about to use.
      this.addEventListener('pointerover', LiteVimeo.warmConnections, {
        once: true,
      });

      // Once the user clicks, add the real iframe and drop our play button
      this.addEventListener('click', (e) => this.addIframe(e));

      // Progressively enhance the link to the Vimeo as a play button.
      const playLink = this.querySelector('a');
      if (playLink) {
        const playBtn = document.createElement('button');
        playBtn.classList.add(...playLink.classList.values());
        playBtn.setAttribute('aria-label', playLink.getAttribute('aria-label')!);
        playLink.replaceWith(playBtn);
      }
    }

    /**
     * Add a <link rel={preload | preconnect} ...> to the head
     */
    static addPrefetch(rel: string, url: string): void {
      const linkEl = document.createElement('link');
      linkEl.rel = rel;
      linkEl.href = url;
      document.head.append(linkEl);
    }

    /**
     * Begin pre-connecting to warm up the iframe load
     * Since the embed's network requests load within its iframe,
     *   preload/prefetch'ing them outside the iframe will only cause double-downloads.
     * So, the best we can do is warm up a few connections to origins that are in the critical path.
     *
     * Maybe `<link rel=preload as=document>` would work, but it's unsupported: http://crbug.com/593267
     * But TBH, I don't think it'll happen soon with Site Isolation and split caches adding serious complexity.
     */
    static warmConnections(): void {
      if (LiteVimeo.preconnected) return;

      // The iframe document and most of its subresources come right off player.vimeo.com
      LiteVimeo.addPrefetch('preconnect', 'https://player.vimeo.com');
      // Images
      LiteVimeo.addPrefetch('preconnect', 'https://i.vimeocdn.com');
      // Files .js, .css
      LiteVimeo.addPrefetch('preconnect', 'https://f.vimeocdn.com');
      // Metrics
      LiteVimeo.addPrefetch('preconnect', 'https://fresnel.vimeocdn.com');

      LiteVimeo.preconnected = true;
    }

    addIframe(e: MouseEvent): void {
      if (this.classList.contains('ltv-activated')) return;
      e.preventDefault();
      this.classList.add('ltv-activated');

      const t = encodeURIComponent(this.dataset.t || '0m');
      const params = new URLSearchParams(this.dataset.params || []);

      const iframeEl = document.createElement('iframe');
      iframeEl.width = '640';
      iframeEl.height = '360';
      iframeEl.allow = 'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture';
      iframeEl.setAttribute('sandbox', 'allow-scripts allow-same-origin allow-presentation');
      iframeEl.setAttribute('referrerpolicy', 'no-referrer-when-downgrade');
      iframeEl.allowFullscreen = true;
      iframeEl.src = `https://player.vimeo.com/video/${this.videoId}?${params.toString()}#t=${t}`;
      this.append(iframeEl);
    }
  }

  // Register custom element
  if (!customElements.get('lite-vimeo')) {
    customElements.define('lite-vimeo', LiteVimeo);
  }
</script>
